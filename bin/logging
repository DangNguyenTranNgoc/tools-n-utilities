#!/usr/bin/env bash

declare -A log_levels=( [VERBOSE]=0 [DEBUG]=1 [INFO]=2 [WARN]=3 [ERROR]=4 )

function console-logger() {
    local level=""
    local tag=""
    while [ $# -gt 0 ]; do
        case "$1" in
            -l)
                level=$2
                shift
                shift
                ;;
            -t)
                tag=$2
                shift
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    # Printing...
    printf '\e[30;1m%-20s\e[m' "$(date +"%F %H:%M:%S")"
    case $level in
        error|ERROR)
            printf '\e[1;31m%-8s\e[m' "ERROR"
            ;;
        warn|WARN)
            printf '\e[1;33m%-8s\e[m' "WARN"
            ;;
        info|INFO)
            printf '\e[1;32m%-8s\e[m' "INFO"
            ;;
        debug|DEBUG)
            printf '\e[1;36m%-8s\e[m' "DEBUG"
            ;;
        verbose|VERBOSE)
            printf '\e[1;37m%-8s\e[m' "VERBOSE"
            ;;
        *)
            printf '\e[1;32m%-8s\e[m' "INFO"
            ;;
    esac
    if [[ -n $tag ]];then
        printf '[\e[1;34m%s\e[m] ' "${tag}"
    fi
    printf '%s\n' "${@}"
}

function file-logger() {
    local level=""
    local tag=""
    local file="/dev/null"
    local msg=""
    while [ $# -gt 0 ]; do
        case "$1" in
            -l)
                level=$2
                shift
                shift
                ;;
            -t)
                tag=$2
                shift
                shift
                ;;
            -f)
                file=$2
                shift
                shift
                ;;
            *)
                break
                ;;
        esac
    done
    # Printing...
    local dt="$(date +"%F %H:%M:%S")"
    case $level in
        error|ERROR)
            msg="${dt} ERROR   "
            ;;
        warn|WARN)
            msg="${dt} WARN    "
            ;;
        info|INFO)
            msg="${dt} INFO    "
            ;;
        debug|DEBUG)
            msg="${dt} DEBUG   "
            ;;
        verbose|VERBOSE)
            msg="${dt} VERBOSE "
            ;;
        *)
            msg="${dt} INFO    "
            ;;
    esac
    echo "${msg} [${tag}] ${@}" >> "${file}"
}


function logger() {
    local level="INFO"
    local tag="main"
    local log_file="/dev/null"
    while [[ $# -gt 0 ]]; do
        case $1 in
            -l|--level)
                level="$2"
                shift
                shift
                ;;
            -t|--tag)
                tag=$2
                shift
                shift
                ;;
            -h|--help)
                cat <<HELPEOF

NAME
    Print logger function. Wrapper of logging.
SYNOPSIS
    logger [-l level] [-t tag] [-h] message
DESCRIPTION
    Required arguments:
    -l level
    Level of log. level: info|INFO, debug|DEBUG, warn|WARN, error|ERROR, varbose|VERBOSE

    Mandatory arguments:
    -t Add tag to log.

HELPEOF
                exit 0
                ;;
            *)
                break
                ;;
        esac
    done
    # Setup log file
    if [[ -n "${LOGGER_LOGFILE}" && -f "${LOGGER_LOGFILE}" ]];then
        log_file="${LOGGER_LOGFILE}"
    fi
    # Setup level
    case $level in
        error|ERROR)
            level="ERROR"
            ;;
        warn|WARN)
            level="WARN"
            ;;
        info|INFO)
            level="INFO"
            ;;
        debug|DEBUG)
            level="DEBUG"
            ;;
        verbose|VERBOSE)
            level="VERBOSE"
            ;;
    esac
    if [[ ${log_levels[$level]} ]];then
        level="$level"
    fi
    # Setup tag
    if [[ -z $tag && -n ${LOGGER_TAG} ]];then
        tag="${LOGGER_TAG}"
    fi
    # [VERBOSE]=0 [DEBUG]=1 [INFO]=2 [WARN]=3 [ERROR]=4
    if [[ -n "${LOGGER_LVL}" ]] && [[ ${log_levels[$level]} -lt ${log_levels[$LOGGER_LVL]} ]];then
        file-logger -l $level -t $tag -f "${log_file}" "${@}" 
    else
        console-logger -l $level -t $tag "${@}"
        file-logger -l $level -t $tag -f "${log_file}" "${@}" 
    fi
}

function err() {
    if [ $# -eq 1 ];then
        logger -l ERROR "${@}"
    elif [ $# -gt 0 ];then
        logger -l ERROR -t "$1" "${@:2}"
    fi
}

function warn() {
    if [ $# -eq 1 ];then
        logger -l WARN "${@}"
    elif [ $# -gt 0 ];then
        logger -l WARN -t "$1" "${@:2}"
    fi
}

function info() {
    if [ $# -eq 1 ];then
        logger -l INFO "${@}"
    elif [ $# -gt 0 ];then
        logger -l INFO -t "$1" "${@:2}"
    fi
}

function debug() {
    if [ $# -eq 1 ];then
        logger -l DEBUG "${@}"
    elif [ $# -gt 0 ];then
        logger -l DEBUG -t "$1" "${@:2}"
    fi
}

function verbose() {
    if [ $# -eq 1 ];then
        logger -l VERBOSE "${@}"
    elif [ $# -gt 0 ];then
        logger -l VERBOSE -t "$1" "${@:2}"
    fi
}

function setup_logger() {
    local folder=""
    local tag=""
    local level=""
    while [ $# -gt 0 ]; do
        case "$1" in
            -f|--log-folder)
                folder=$2
                shift
                shift
                ;;
            -t|--tag)
                tag=$2
                shift
                shift
                ;;
            -l|-log-level)
                level=$2
                shift
                shift
                ;;
            -h|--help)
                cat <<HELPEOF

NAME
    Setup logger function
SYNOPSIS
    setup_logger [-f|--log-folder log folder] [-t|--tag tag] [-l|-log-level log level]
DESCRIPTION
    

HELPEOF
                exit 0 
                ;;
            *)
                echo "setup_logger [-c category] [-t tag] [-h]"
                exit 0
                ;;
        esac
    done
    # Check and export log folder
    if [[ -n $folder && -d "$folder" ]];then
        file="${folder}/$(date +"%Y%m%d_%H%M%S").log"
        if [ ! -f "${file}" ];then
            touch "${file}"
            retval=$?
            if [[ $retval == 0 ]];then
                export LOGGER_LOGFILE="${file}"
            else
                echo 2>&1 "\033[31;1mERROR:\033[mCouldn't create file ${file}"
            fi
        fi
        
    fi
    # Check and export log tag
    if [[ -n $tag ]];then
        export LOGGER_TAG="$tag"
    fi
    # Check and export log level
    case $level in
        error|ERROR)
            level="ERROR"
            ;;
        warn|WARN)
            level="WARN"
            ;;
        info|INFO)
            level="INFO"
            ;;
        debug|DEBUG)
            level="DEBUG"
            ;;
        verbose|VERBOSE)
            level="VERBOSE"
            ;;
    esac
    if [[ -n "${level}" && ${log_levels[$level]} ]];then
        export LOGGER_LVL=$level
    fi
    info "setup-logger" "Log file [${file}]; Log level [${level}]"
}
